plt.ylabel('plot')
plt.legend(loc='best')
plt.show()
ite = 1
# Create a loop for the animation
for t in theta[:,0]:
x0=0
y0=0
x1=(l*math.sin(t))
y1 = -(l*math.cos(t))
filename = str(ite)+'.png'
ite=ite+1
#plotting
plt.figure()
plt.plot([-0.5,0.5],[0,0],'black',linewidth=5) # plotting the base line of the pendulum
plt.plot([x0,x1],[y0,y1],linewidth=3,color='r')
plt.plot(x0,y0,'o',markersize=5) # highlighting the point
plt.plot(x1,y1,'o',markersize=30,color='blue') # highlighting the point
plt.xlim([-1.5,1.5]) #defining the x limit.
plt.ylim([-1.5,1.5]) # defining the y limit.
plt.title('Animation of of Simple Pendulum')
plt.savefig(filename)
quit
import numpy as np
reticulate::repl_python()
from scipy.integrate import odeint
quit
reticulate::repl_python()
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import math
import matplotlib.animation as animation
#defining the function for ODE
def mode1(theta,t,b,g,l,m):
theta1 = theta[0]
theta2 = theta[1]
dtheta1_dt = theta2
dtheta2_dt = -(b/m)*theta2 - (g/l)*math.sin(theta1)
dtheta_dt = [dtheta1_dt, dtheta2_dt]
return dtheta_dt
#Initializing important parameters
#damping coefficient
b=0.05
#accelaration due to gravity
g=9.81
#lenght of string
l=1
#mass of bob
m=0.1
#initial condition
theta_0 = [0,5]
#time points
t = np.linspace(0,10,150)
#solving ODE by function call
theta = odeint(mode1,theta_0,t,args = (b,g,l,m))
#plotting results for transient behavior
plt.figure()
plt.plot(t,theta[:,0],'b-',label = r'$frac{dtheta_1}{dt}=theta2$')
plt.plot(t,theta[:,1],'r--',label = r'$frac{dtheta_2}{dt}=frac{b}{m}theta_2-frac{g}{l}sintheta_1$')
plt.ylabel('Plot')
plt.xlabel('time')
plt.legend(loc='best')
plt.show()
#animation
fig = plt.figure(figsize=(5, 5), facecolor='w')
ax = fig.add_subplot(1, 1, 1)
plt.rcParams['font.size'] = 15
lns = []
for i in range(len(theta)):
#plotting the string/chord
ln, = ax.plot([0, np.sin(theta[i, 0])], [0, -np.cos(theta[i, 0])], color='k', lw=2)
#plotting the bob
bob, = ax.plot(np.sin(theta[i, 0]), -np.cos(theta[i, 0]),'o',markersize=20,color='r')
#plotting the time for simulation
tm = ax.text(-0.9, 0.25, 'Time = %.1fs' % t[i])
lns.append([ln, bob, tm])
ax.set_aspect('equal', 'datalim')
#saving the animation
ani = animation.ArtistAnimation(fig, lns, interval=50)
fn = 'Pendulum_Animation'
ani.save(fn+'.mp4',writer='ffmpeg',fps=1000/50)
quit
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
class SimplePendulum:
"""Simple Pendulum Class"""
def __init__(self,
init_angle=50,
L=1.0,  # length of pendulum in m
G=9.8,  # acceleration due to gravity, in m/s^2
origin=(0,0)):
self.L = L
self.G = G
self.origin = origin
self.time_elapsed = 0
self.init_angle = init_angle * np.pi / 180.
self.angle = self.init_angle
def position(self):
"""compute the current x,y position of the pendulum"""
x = np.cumsum([self.origin[0], self.L * np.sin(self.angle)])
y = np.cumsum([self.origin[1], -self.L * np.cos(self.angle)])
return (x, y)
def step(self, dt):
"""execute one time step of length dt and update state"""
self.time_elapsed += dt
self.angle = self.init_angle * np.cos(np.sqrt( self.G / self.L) * self.time_elapsed)
#------------------------------------------------------------
# set up initial state and global variables
pendulum = SimplePendulum(40)
dt = 1./30 # 30 fps
#------------------------------------------------------------
# set up figure and animation
fig = plt.figure()
ax = fig.add_subplot(111, aspect='equal', autoscale_on=False,
xlim=(-2, 2), ylim=(-2, 2))
ax.grid()
line, = ax.plot([], [], 'o-', lw=2)
time_text = ax.text(0.02, 0.95, '', transform=ax.transAxes)
def init():
"""initialize animation"""
line.set_data([], [])
time_text.set_text('')
return line, time_text
def animate(i):
"""perform animation step"""
global pendulum, dt
pendulum.step(dt)
line.set_data(*pendulum.position())
time_text.set_text('time = %.1f' % pendulum.time_elapsed)
return line, time_text
# choose interval based on dt and the time to animate one step
from time import time
t0 = time()
animate(0)
t1 = time()
interval = 1000 * dt - (t1 - t0)
ani = animation.FuncAnimation(fig,
animate,
frames=300,
interval=interval,
blit=False,
init_func=init)
plt.show()
quit
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
class SimplePendulum:
"""Simple Pendulum Class"""
def __init__(self,
init_angle=50,
L=1.0,  # length of pendulum in m
G=9.8,  # acceleration due to gravity, in m/s^2
origin=(0,0)):
self.L = L
self.G = G
self.origin = origin
self.time_elapsed = 0
self.init_angle = init_angle * np.pi / 180.
self.angle = self.init_angle
def position(self):
"""compute the current x,y position of the pendulum"""
x = np.cumsum([self.origin[0], self.L * np.sin(self.angle)])
y = np.cumsum([self.origin[1], -self.L * np.cos(self.angle)])
return (x, y)
def step(self, dt):
"""execute one time step of length dt and update state"""
self.time_elapsed += dt
self.angle = self.init_angle * np.cos(np.sqrt( self.G / self.L) * self.time_elapsed)
#------------------------------------------------------------
# set up initial state and global variables
pendulum = SimplePendulum(40)
dt = 1./30 # 30 fps
#------------------------------------------------------------
# set up figure and animation
fig = plt.figure()
ax = fig.add_subplot(111, aspect='equal', autoscale_on=False,
xlim=(-2, 2), ylim=(-2, 2))
ax.grid()
line, = ax.plot([], [], 'o-', lw=2)
time_text = ax.text(0.02, 0.95, '', transform=ax.transAxes)
def init():
"""initialize animation"""
line.set_data([], [])
time_text.set_text('')
return line, time_text
def animate(i):
"""perform animation step"""
global pendulum, dt
pendulum.step(dt)
line.set_data(*pendulum.position())
time_text.set_text('time = %.1f' % pendulum.time_elapsed)
return line, time_text
# choose interval based on dt and the time to animate one step
from time import time
t0 = time()
animate(0)
t1 = time()
interval = 1000 * dt - (t1 - t0)
ani = animation.FuncAnimation(fig,
animate,
frames=300,
interval=interval,
blit=False,
init_func=init)
plt.show()
animate(0)
quit
reticulate::repl_python()
"""
===========================
The double pendulum problem
===========================
This animation illustrates the double pendulum problem.
"""
# Double pendulum formula translated from the C code at
# http://www.physics.usyd.edu.au/~wheat/dpend_html/solve_dpend.c
from numpy import sin, cos
import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as integrate
import matplotlib.animation as animation
G = 9.8  # acceleration due to gravity, in m/s^2
L1 = 1.0  # length of pendulum 1 in m
L2 = 1.0  # length of pendulum 2 in m
M1 = 1.0  # mass of pendulum 1 in kg
M2 = 1.0  # mass of pendulum 2 in kg
def derivs(state, t):
dydx = np.zeros_like(state)
dydx[0] = state[1]
del_ = state[2] - state[0]
den1 = (M1 + M2)*L1 - M2*L1*cos(del_)*cos(del_)
dydx[1] = (M2*L1*state[1]*state[1]*sin(del_)*cos(del_) +
M2*G*sin(state[2])*cos(del_) +
M2*L2*state[3]*state[3]*sin(del_) -
(M1 + M2)*G*sin(state[0]))/den1
dydx[2] = state[3]
den2 = (L2/L1)*den1
dydx[3] = (-M2*L2*state[3]*state[3]*sin(del_)*cos(del_) +
(M1 + M2)*G*sin(state[0])*cos(del_) -
(M1 + M2)*L1*state[1]*state[1]*sin(del_) -
(M1 + M2)*G*sin(state[2]))/den2
return dydx
# create a time array from 0..100 sampled at 0.05 second steps
dt = 0.05
t = np.arange(0.0, 20, dt)
# th1 and th2 are the initial angles (degrees)
# w10 and w20 are the initial angular velocities (degrees per second)
th1 = 120.0
w1 = 0.0
th2 = -10.0
w2 = 0.0
# initial state
state = np.radians([th1, w1, th2, w2])
# integrate your ODE using scipy.integrate.
y = integrate.odeint(derivs, state, t)
x1 = L1*sin(y[:, 0])
y1 = -L1*cos(y[:, 0])
x2 = L2*sin(y[:, 2]) + x1
y2 = -L2*cos(y[:, 2]) + y1
fig = plt.figure()
ax = fig.add_subplot(111, autoscale_on=False, xlim=(-2, 2), ylim=(-2, 2))
ax.grid()
line, = ax.plot([], [], 'o-', lw=2)
time_template = 'time = %.1fs'
time_text = ax.text(0.05, 0.9, '', transform=ax.transAxes)
def init():
line.set_data([], [])
time_text.set_text('')
return line, time_text
def animate(i):
thisx = [0, x1[i], x2[i]]
thisy = [0, y1[i], y2[i]]
line.set_data(thisx, thisy)
time_text.set_text(time_template % (i*dt))
return line, time_text
ani = animation.FuncAnimation(fig, animate, np.arange(1, len(y)),
interval=25, blit=True, init_func=init)
# ani.save('double_pendulum.mp4', fps=15)
plt.show()
quit
library(tidyverse)
library(gganimate)
install.packages("gganimate")
library(tidyverse)
library(gganimate)
# constants
G  <-  9.807  # acceleration due to gravity, in m/s^2
L1 <-  1.0    # length of pendulum 1 (m)
L2 <-  1.0    # length of pendulum 2 (m)
M1 <-  1.0    # mass of pendulum 1 (kg)
M2 <-  1.0    # mass of pendulum 2 (kg)
parms <- c(L1,L2,M1,M2,G)
# initial conditions
th1 <-  20.0  # initial angle theta of pendulum 1 (degree)
w1  <-  0.0   # initial angular velocity of pendulum 1 (degrees per second)
th2 <-  180.0 # initial angle theta of pendulum 2 (degree)
w2  <-  0.0   # initial angular velocity of pendulum 2 (degrees per second)
state <- c(th1, w1, th2, w2)*pi/180  #convert degree to radians
derivs <- function(state, t){
L1 <- parms[1]
L2 <- parms[2]
M1 <- parms[3]
M2 <- parms[4]
G  <- parms[5]
dydx    <-  rep(0,length(state))
dydx[1] <-  state[2]
del_ <-  state[3] - state[1]
den1 <-  (M1 + M2)*L1 - M2*L1*cos(del_)*cos(del_)
dydx[2]  <-  (M2*L1*state[2]*state[3]*sin(del_)*cos(del_) +
M2*G*sin(state[3])*cos(del_) +
M2*L2*state[4]*state[4]*sin(del_) -
(M1 + M2)*G*sin(state[1]))/den1
dydx[3] <-  state[4]
den2 <-  (L2/L1)*den1
dydx[4]  <-  (-M2*L2*state[4]*state[4]*sin(del_)*cos(del_) +
(M1 + M2)*G*sin(state[1])*cos(del_) -
(M1 + M2)*L1*state[2]*state[2]*sin(del_) -
(M1 + M2)*G*sin(state[3]))/den2
return(dydx)
}
sol <- odeintr::integrate_sys(derivs,init = state,duration = 30,
start = 0,step_size = 0.1)
install.packages("odeintr")
library(tidyverse)
library(gganimate)
# constants
G  <-  9.807  # acceleration due to gravity, in m/s^2
L1 <-  1.0    # length of pendulum 1 (m)
L2 <-  1.0    # length of pendulum 2 (m)
M1 <-  1.0    # mass of pendulum 1 (kg)
M2 <-  1.0    # mass of pendulum 2 (kg)
parms <- c(L1,L2,M1,M2,G)
# initial conditions
th1 <-  20.0  # initial angle theta of pendulum 1 (degree)
w1  <-  0.0   # initial angular velocity of pendulum 1 (degrees per second)
th2 <-  180.0 # initial angle theta of pendulum 2 (degree)
w2  <-  0.0   # initial angular velocity of pendulum 2 (degrees per second)
state <- c(th1, w1, th2, w2)*pi/180  #convert degree to radians
derivs <- function(state, t){
L1 <- parms[1]
L2 <- parms[2]
M1 <- parms[3]
M2 <- parms[4]
G  <- parms[5]
dydx    <-  rep(0,length(state))
dydx[1] <-  state[2]
del_ <-  state[3] - state[1]
den1 <-  (M1 + M2)*L1 - M2*L1*cos(del_)*cos(del_)
dydx[2]  <-  (M2*L1*state[2]*state[3]*sin(del_)*cos(del_) +
M2*G*sin(state[3])*cos(del_) +
M2*L2*state[4]*state[4]*sin(del_) -
(M1 + M2)*G*sin(state[1]))/den1
dydx[3] <-  state[4]
den2 <-  (L2/L1)*den1
dydx[4]  <-  (-M2*L2*state[4]*state[4]*sin(del_)*cos(del_) +
(M1 + M2)*G*sin(state[1])*cos(del_) -
(M1 + M2)*L1*state[2]*state[2]*sin(del_) -
(M1 + M2)*G*sin(state[3]))/den2
return(dydx)
}
sol <- odeintr::integrate_sys(derivs,init = state,duration = 30,
start = 0,step_size = 0.1)
x1 <-  L1*sin(sol[, 2])
y1 <-  -L1*cos(sol[, 2])
x2 <- L2*sin(sol[, 4]) + x1
y2 <- -L2*cos(sol[, 4]) + y1
df <- tibble(t=sol[,1],x1,y1,x2,y2,group=1)
ggplot(df)+
geom_segment(aes(xend=x1,yend=y1),x=0,y=0)+
geom_segment(aes(xend=x2,yend=y2,x=x1,y=y1))+
geom_point(size=5,x=0,y=0)+
geom_point(aes(x1,y1),col="red",size=M1)+
geom_point(aes(x2,y2),col="blue",size=M2)+
scale_y_continuous(limits=c(-2,2))+
scale_x_continuous(limits=c(-2,2))+
ggraph::theme_graph()+
labs(title="{frame_time} s")+
transition_time(t) -> p
install.packages("ggraph")
library(tidyverse)
library(gganimate)
# constants
G  <-  9.807  # acceleration due to gravity, in m/s^2
L1 <-  1.0    # length of pendulum 1 (m)
L2 <-  1.0    # length of pendulum 2 (m)
M1 <-  1.0    # mass of pendulum 1 (kg)
M2 <-  1.0    # mass of pendulum 2 (kg)
parms <- c(L1,L2,M1,M2,G)
# initial conditions
th1 <-  20.0  # initial angle theta of pendulum 1 (degree)
w1  <-  0.0   # initial angular velocity of pendulum 1 (degrees per second)
th2 <-  180.0 # initial angle theta of pendulum 2 (degree)
w2  <-  0.0   # initial angular velocity of pendulum 2 (degrees per second)
state <- c(th1, w1, th2, w2)*pi/180  #convert degree to radians
derivs <- function(state, t){
L1 <- parms[1]
L2 <- parms[2]
M1 <- parms[3]
M2 <- parms[4]
G  <- parms[5]
dydx    <-  rep(0,length(state))
dydx[1] <-  state[2]
del_ <-  state[3] - state[1]
den1 <-  (M1 + M2)*L1 - M2*L1*cos(del_)*cos(del_)
dydx[2]  <-  (M2*L1*state[2]*state[3]*sin(del_)*cos(del_) +
M2*G*sin(state[3])*cos(del_) +
M2*L2*state[4]*state[4]*sin(del_) -
(M1 + M2)*G*sin(state[1]))/den1
dydx[3] <-  state[4]
den2 <-  (L2/L1)*den1
dydx[4]  <-  (-M2*L2*state[4]*state[4]*sin(del_)*cos(del_) +
(M1 + M2)*G*sin(state[1])*cos(del_) -
(M1 + M2)*L1*state[2]*state[2]*sin(del_) -
(M1 + M2)*G*sin(state[3]))/den2
return(dydx)
}
sol <- odeintr::integrate_sys(derivs,init = state,duration = 30,
start = 0,step_size = 0.1)
x1 <-  L1*sin(sol[, 2])
y1 <-  -L1*cos(sol[, 2])
x2 <- L2*sin(sol[, 4]) + x1
y2 <- -L2*cos(sol[, 4]) + y1
df <- tibble(t=sol[,1],x1,y1,x2,y2,group=1)
ggplot(df)+
geom_segment(aes(xend=x1,yend=y1),x=0,y=0)+
geom_segment(aes(xend=x2,yend=y2,x=x1,y=y1))+
geom_point(size=5,x=0,y=0)+
geom_point(aes(x1,y1),col="red",size=M1)+
geom_point(aes(x2,y2),col="blue",size=M2)+
scale_y_continuous(limits=c(-2,2))+
scale_x_continuous(limits=c(-2,2))+
ggraph::theme_graph()+
labs(title="{frame_time} s")+
transition_time(t) -> p
pa <- animate(p,nframes=nrow(df),fps=20)
pa
library(tidyverse)
library(gganimate)
# constants
G  <-  9.807  # acceleration due to gravity, in m/s^2
L1 <-  1.0    # length of pendulum 1 (m)
L2 <-  1.0    # length of pendulum 2 (m)
M1 <-  1.0    # mass of pendulum 1 (kg)
M2 <-  1.0    # mass of pendulum 2 (kg)
parms <- c(L1,L2,M1,M2,G)
# initial conditions
th1 <-  20.0  # initial angle theta of pendulum 1 (degree)
w1  <-  0.0   # initial angular velocity of pendulum 1 (degrees per second)
th2 <-  180.0 # initial angle theta of pendulum 2 (degree)
w2  <-  0.0   # initial angular velocity of pendulum 2 (degrees per second)
state <- c(th1, w1, th2, w2)*pi/180  #convert degree to radians
derivs <- function(state, t){
L1 <- parms[1]
L2 <- parms[2]
M1 <- parms[3]
M2 <- parms[4]
G  <- parms[5]
dydx    <-  rep(0,length(state))
dydx[1] <-  state[2]
del_ <-  state[3] - state[1]
den1 <-  (M1 + M2)*L1 - M2*L1*cos(del_)*cos(del_)
dydx[2]  <-  (M2*L1*state[2]*state[3]*sin(del_)*cos(del_) +
M2*G*sin(state[3])*cos(del_) +
M2*L2*state[4]*state[4]*sin(del_) -
(M1 + M2)*G*sin(state[1]))/den1
dydx[3] <-  state[4]
den2 <-  (L2/L1)*den1
dydx[4]  <-  (-M2*L2*state[4]*state[4]*sin(del_)*cos(del_) +
(M1 + M2)*G*sin(state[1])*cos(del_) -
(M1 + M2)*L1*state[2]*state[2]*sin(del_) -
(M1 + M2)*G*sin(state[3]))/den2
return(dydx)
}
sol <- odeintr::integrate_sys(derivs,init = state,duration = 30,
start = 0,step_size = 0.1)
x1 <-  L1*sin(sol[, 2])
y1 <-  -L1*cos(sol[, 2])
x2 <- L2*sin(sol[, 4]) + x1
y2 <- -L2*cos(sol[, 4]) + y1
df <- tibble(t=sol[,1],x1,y1,x2,y2,group=1)
ggplot(df)+
geom_segment(aes(xend=x1,yend=y1),x=0,y=0)+
geom_segment(aes(xend=x2,yend=y2,x=x1,y=y1))+
geom_point(size=5,x=0,y=0)+
geom_point(aes(x1,y1),col="red",size=M1)+
geom_point(aes(x2,y2),col="blue",size=M2)+
scale_y_continuous(limits=c(-2,2))+
scale_x_continuous(limits=c(-2,2))+
ggraph::theme_graph()+
labs(title="{frame_time} s")+
transition_time(t) -> p
pa <- animate(p,nframes=nrow(df),fps=20)
pa
<video width="320" height="240" controls>
pwd
pwd()
knitr::opts_chunk$set(echo = TRUE)
for (i in 1:10) plot(runif(100), ylim = c(0, 1)) # for example
install.packages("prettrydoc")
install.packages("prettydoc")
install.packages("rmdformats")
?bookdown
install.packages("captioner")
?captioner
??captioner
install.packages("rmdformats")
install.packages("rmdformats")
